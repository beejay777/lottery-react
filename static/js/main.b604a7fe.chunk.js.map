{"version":3,"sources":["logo.svg","web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","web3","Web3","window","currentProvider","lottery","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","App","state","manager","players","balance","value","message","onSubmit","_callee","event","accounts","regenerator_default","a","wrap","_context","prev","next","preventDefault","getAccounts","sent","_this","setState","methods","enter","send","from","utils","toWei","stop","this","call","showPlayers","getBalance","options","address","_this2","react_default","createElement","length","fromWei","onChange","target","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b604a7fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Web3 from 'web3';\n\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;","import web3 from './web3';\n\nconst address = '0x0cC58a61D49E3562C6CC2907133B848C324b3E57';\n\nconst abi = [{\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"manager\",\n    \"outputs\": [{\n        \"name\": \"\",\n        \"type\": \"address\"\n    }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n}, {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"pickWinner\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n}, {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"showPlayers\",\n    \"outputs\": [{\n        \"name\": \"\",\n        \"type\": \"address[]\"\n    }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n}, {\n    \"constant\": false,\n    \"inputs\": [],\n    \"name\": \"enter\",\n    \"outputs\": [],\n    \"payable\": true,\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n}, {\n    \"constant\": true,\n    \"inputs\": [{\n        \"name\": \"\",\n        \"type\": \"uint256\"\n    }],\n    \"name\": \"players\",\n    \"outputs\": [{\n        \"name\": \"\",\n        \"type\": \"address\"\n    }],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n}, {\n    \"inputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n}];\n\nexport default new web3.eth.Contract(abi, address);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\n\nclass App extends Component {\n  state = {\n    manager: '',\n    players: [],\n    balance: '',\n    value: '',\n    message: ''\n  };\n  \n  async componentDidMount(){\n    const manager = await lottery.methods.manager().call();\n    const players = await lottery.methods.showPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n\n    this.setState({players, manager, balance});\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n\n    const accounts = await web3.eth.getAccounts();\n\n    this.setState({message: 'Waiting on transaction success...'});\n\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, 'ether')\n    });\n\n    this.setState({message: 'You have been entered!'});\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Lottery Contract</h2>\n        <p>This contract is managed by {this.state.manager}.\n        There are {this.state.players.length} peoples entered to win {web3.utils.fromWei(this.state.balance, 'ether')} ether </p>\n\n        <hr/>\n\n        <form onSubmit={this.onSubmit}>\n          <h4>Want to try your luck</h4>\n          <div>\n            <label>Amount of ether to enter</label>\n            <input\n              value = {this.state.value} \n              onChange={event => this.setState({value: event.target.value})}/>\n          </div>\n          <button>Enter </button>\n        </form>\n        <hr/>\n        <h3>{this.state.message}</h3>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}